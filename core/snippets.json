{
		
	"Create useEffect": {
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {",
				"$1",
			"},[$2]);"
		],
		"description": "Create useEffect"
	},
	"Create useState": {
		"prefix": "useState",
		"body": [
			"const [${1:value}, set${2:Value}] = useState(${3:null});" 
		],
		"description": "Create useState"
	},
	"Create import": {
		"prefix": "imp",
		"body": [
			"import { $1 } from '~/$2';"
		],
		"description": "Create import"
	},
	"Create arrow function": {
		"prefix": "afn",
		"body": [
			"const ${1:onArrowFunction} = () => {",
				"${1:console.log('onArrowFunction')}",
			"};"
		],
		"description": "Create arrow function"
	},
	"Create console tron": {
		"prefix": "clt",
		"body": [
			"console.tron.log({ data: $1 })"
		],
		"description": "Create console.tron.log"
	},



	"Component functional React": {
		"prefix": "rfc",
		"body": [
			"import React, { FC } from 'react';",
			"// import { Wrapper } from './styles'; ",
			"",
			"type Props = {};",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: FC<Props> = () => {",
			"  return <div />;",
			"};",
			"",
			"export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
			""
		],
		"description": "Create functional component from react"
	},
	


	"Create Styles": {
		"prefix": "str",
		"body": [
			"import styled from 'styled-components';",
			"",
			"export const ${Wrapper} = styled.div``;"
		],
		"description": "Create styled structure"
	},
	"Styled component": {
		"prefix": "stc",
		"body": [
			"export const ${1:Component} = styled${2:.div}`$3`;"
		],
		"description": "Styled component"
	},
	"IfStyle structure": {
		"prefix": "ifs",
		"body": [
			"const $1 = ifStyle('$2');"
		],
		"description": "ifStyle structure"
	},
	"getTheme structure": {
		"prefix": "gt",
		"body": [
			"const ${property} = getTheme('${property}');"
		],
		"description": "getTheme structure"
	},
	"main color theme": {
		"prefix": "gtm",
		"body": [
			"const $1Main = getTheme('$1.main');"
		],
		"description": "main color theme"
	},
	"light color theme": {
		"prefix": "gtl",
		"body": [
			"const $1Light = getTheme('$1.light');"
		],
		"description": "colorLight theme"
	},
	"dark color theme": {
		"prefix": "gtd",
		"body": [
			"const $1Dark = getTheme('$1.dark');"
		],
		"description": "dark color theme"
	},
	"contrast color theme": {
		"prefix": "gtc",
		"body": [
			"const $1Contrast = getTheme('$1.contrast');"
		],
		"description": "contrast color theme"
	},
	"Create Typography": {
		"prefix": "stp",
		"body": [
			"export const ${1:Text} = styled(Typography).attrs({",
				"variant: '${2:body1}'",
			  "})``"
		],
		"description": "Create Typography"
	},
	"Get Small Radius": {
		"prefix": "gtsr",
		"body": [
			"const smallRadius = getTheme('smallRadius');"
		],
		"description": "Get smallRadius of theme "
	},
	"Get Medium Radius": {
		"prefix": "gtmr",
		"body": [
			"const mediumRadius = getTheme('mediumRadius');"
		],
		"description": "Get mediumRadius of theme "
	},
	"Get Large Radius": {
		"prefix": "gtlr",
		"body": [
			"const largeRadius = getTheme('largeRadius');"
		],
		"description": "Get largeRadius of theme "
	},
	"Get Small Spacing": {
		"prefix": "gtss",
		"body": [
			"const smallSpacing = getTheme('smallSpacing');"
		],
		"description": "Get smallSpacing of theme "
	},
	"Get Medium Spacing": {
		"prefix": "gtms",
		"body": [
			"const mediumSpacing = getTheme('mediumSpacing');"
		],
		"description": "Get mediumSpacing of theme "
	},
	"Get Large Spacing": {
		"prefix": "gtls",
		"body": [
			"const largeSpacing = getTheme('largeSpacing');"
		],
		"description": "Get largeSpacing of theme "
	},



	"Component functional RN": {
		"prefix": "rnfc",
		"body": [
			"import React, { FC } from 'react';",
			"import { View } from 'react-native';",
			"// import { Wrapper } from './styles'; ",
			"",
			"type Props = {}",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: FC<Props> = () => {",
			"  return <View />;",
			"};",
			"",
			"export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
			""
		],
		"description": "Create functional component from react"
	},

	"Create Styles RN": {
		"prefix": "rnstyled",
		"body": [
			"import styled from 'styled-components/native';",
			"",
			"export const ${Wrapper} = styled.View``;"
		],
		"description": "Create styled structure"
	},

	"Create Styles React": {
		"prefix": "rstyled",
		"body": [
			"import styled from 'styled-components';",
			"",
			"export const ${Wrapper} = styled.div``;"
		],
		"description": "Create styled structure"
	}
}